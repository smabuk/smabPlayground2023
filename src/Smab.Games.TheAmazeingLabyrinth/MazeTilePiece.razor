<div class="mazetile-container">
	<div class="mazetile"
		 data-treasure="@(MazeTile.Treasure is not Treasure.NoTreasure ? MazeTile.Treasure : null)"
		 data-slide="@(Slide is not NoDirection ? Slide.ToShortString() : null)"
		 data-directions="@MazeTile.Paths().ToShortString()"
		 data-playerhome="@MazeTile.Treasure.IsPlayer()"
		 data-rotation="@MazeTile.Orientation"
		 @onclick="async () => { await OnClick.InvokeAsync(); }"
		 @oncontextmenu="async () => { await OnContextMenu.InvokeAsync(); }"
		 @oncontextmenu:preventDefault="@Extra"
		 @attributes="AdditionalAttributes">
		<PathBackground MazeTile="MazeTile" />
		<span>@((MarkupString)FormatTreasure(MazeTile.Treasure))</span>
	</div>
	<div>
		@if (Players is not []) {
			foreach (Player player in Players) {
				<PlayerImage Player="player" />
			}
		}
	</div>
</div>

@code {
	[Parameter, EditorRequired]
	public required MazeTile MazeTile { get; set; }

	[Parameter]
	public bool Extra { get; set; } = false;

	[Parameter]
	public Direction Slide { get; set; } = NoDirection;

	[Parameter]
	public FormatTreasure FormatTreasure { get; set; } = FormatTreasureDefaults.DefaultEmoji;

	[CascadingParameter]
	public required List<Player> Players { get; set; }


	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object>? AdditionalAttributes { get; set; }

	[Parameter] public EventCallback OnClick { get; set; }
	[Parameter] public EventCallback OnContextMenu { get; set; }
}
