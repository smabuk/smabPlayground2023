@using System.Globalization
@using System.Runtime.InteropServices
@inject IHostEnvironment env

<h3>Simple site debug information</h3>

<ul>
	<li>The site version is <strong>@Program.ProductVersion</strong></li>
	<li>The framework is <strong data-warning="@RuntimeInformation.FrameworkDescription.Contains("preview")">@RuntimeInformation.FrameworkDescription</strong></li>
	<li>The .NET environment is <strong data-warning="@env.EnvironmentName.Equals("Development")">@env.EnvironmentName</strong></li>
	<li>The application name is <strong>@env.ApplicationName</strong></li>
	<li>The operating system is <strong>@GetFullOSVersion()</strong></li>
	<li>The runtime system version is <strong>@RuntimeEnvironment.GetSystemVersion()</strong></li>
	<li>The runtime identifier is <strong data-warning="@RuntimeInformation.RuntimeIdentifier.Contains("x86")">@RuntimeInformation.RuntimeIdentifier</strong></li>
	<li>Is published as self-contained?: <strong data-warning="@GetIsSelfContained().Equals("True")">@GetIsSelfContained()</strong></li>
	<li>The OS architecture is <strong>@RuntimeInformation.OSArchitecture</strong></li>
	<li>Is the architecture Windows? <strong>@OperatingSystem.IsWindows()</strong></li>
	<li>Is the architecture Linux? <strong>@OperatingSystem.IsLinux()</strong></li>
	<li>Is the architecture Android? <strong>@OperatingSystem.IsAndroid()</strong></li>
	<li>The process architecture is <strong data-warning="@RuntimeInformation.ProcessArchitecture.Equals(Architecture.X86)">@RuntimeInformation.ProcessArchitecture</strong></li>
	@if ((Environment.GetEnvironmentVariable("DOTNET_RUNNING_IN_CONTAINER") ?? "").Equals("true", StringComparison.OrdinalIgnoreCase)) {
		<li>The process is running <strong>in a container</strong></li>
	}
	<li>The machine name is <strong>@Environment.MachineName</strong></li>
	<li>The current culture is <strong>@CultureInfo.CurrentCulture</strong></li>
	<li>The current UI culture is <strong>@CultureInfo.CurrentUICulture</strong></li>
	<li>The current server time is <strong>@DateTime.Now.ToString("F") (@TimeZoneName())</strong></li>
	<li>HttpContext user-agent<strong>(@HttpContext?.Request.Headers["user-agent"])</strong></li>
</ul>

@code {

	/// <summary>
	/// According to the documentation this only works on statically rendered pages
	/// </summary>
	[CascadingParameter]
	public HttpContext? HttpContext { get; set; }

	protected string GetFullOSVersion()
	{
		string version = RuntimeInformation.OSDescription;
		if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
			// this might not work in a secure environment so lets just try it
			try {
				Microsoft.Win32.RegistryKey? registryKey = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion");
				if (registryKey is not null) {
					string? buildNumber = registryKey.GetValue("UBR")?.ToString();
					version = $"{version}.{buildNumber}";
				}
			}
			catch (Exception) {
			}
		}

		return version;
	}

	protected string TimeZoneName() =>
		TimeZoneInfo.Local.IsDaylightSavingTime(DateTime.Now)
		? TimeZoneInfo.Local.DaylightName
		: TimeZoneInfo.Local.StandardName;

    protected string GetIsSelfContained()
    {
        object? isSelfContained = AppContext.GetData("IsSelfContained");
        if (isSelfContained is bool b)
            return b ? "True" : "False";
        return "Unknown or Not applicable";
    }
}
