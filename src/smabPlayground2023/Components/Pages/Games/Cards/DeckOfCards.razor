@page "/games/cards/deckofcards/{DeckType?}"
@inject PersistentComponentState appState
@implements IDisposable
@rendermode InteractiveServer

<SmabPageTitle>Deck of Cards</SmabPageTitle>

<div>
	@foreach (PlayingCard card in cards) {
		<CardFace PlayingCard="card" FaceDown="deck[card]" OnClick="() => deck[card] = !deck[card]" />
	}
</div>

@code {
	[Parameter] public string? DeckType { get; set; }

	private PersistingComponentStateSubscription _subscription;

	PlayingCard[] cards = [];
	Dictionary<PlayingCard, bool> deck = [];

	protected override void OnParametersSet()
	{
		_subscription = appState.RegisterOnPersisting(PersistState);

		if (appState.TryTakeFromJson<IEnumerable<StateDto>>("deckofcards", out var stateDto)) {
			cards = [.. stateDto!.Select(s => s.Card)];
			deck = stateDto!.ToDictionary(s => s.Card, s => s.FaceDown);
		} else {
			cards = DeckType switch
			{
				"tarot"      => [.. FrenchTarotPlayingCard.CreateDeck],
				"withjokers" => [.. PlayingCard.CreateDeckWithAllJokers],
				_            => [.. PlayingCard.CreateDeck],
			};

			deck = cards.ToDictionary(c => c, c => Random.Shared.Next(2) == 0 ? false : true);
			Random.Shared.Shuffle(cards);
		}
	}

	private Task PersistState()
	{
		appState.PersistAsJson("deckofcards", cards.Select(c => new StateDto(c, deck[c])));
		return Task.CompletedTask;
	}

	public void Dispose()
	{
		_subscription.Dispose();
	}

	private record StateDto(PlayingCard Card, bool FaceDown);
}
