@page "/games/qless"
@rendermode InteractiveServer
@inject DictionaryOfWords _dictionary;

<SmabPageTitle>Q-Less</SmabPageTitle>
<div class="row my-auto">
	<button class="btn btn-primary w-80" @onclick="() => StartNewGame()">@(gameOver ? "CONGRATULATIONS - New Game" : "New Game")</button>
</div>
@if (qLessDice is not null) {
	<div class="row my-auto mt-2">
		<div class="mt-xl-2 d-flex col-xl">
			<div class="m-auto rounded user-select-none">
				<div class="board m-auto rounded user-select-none row @(gameOver ? WIN_CLASS : null)" @oncontextmenu:preventDefault>
					@for (int r = 0; r < BOARD_HEIGHT; r++) {
						@for (int c = 0; c < BOARD_WIDTH; c++) {
							int row = r;
							int col = c;
							PositionedDie? positionedDie = qLessDice.Board.Where(d => d.Row == row && d.Col == col).SingleOrDefault();
							<QLessDie
								Css="@($"{(positionedDie?.Die.Name == dragId ? MOVE_CLASS : null)}  {(gameStatus is QLessDice.Errors gs ? gs.DiceWithErrors.Any(d => d.Row == row && d.Col == col) ? "error" : null : null)}".Trim())"
								DisplayLetter="@(positionedDie is null ? NO_DIE : positionedDie.Die.Display)"
								Draggable="@(positionedDie is not null)"
								OnDragStartCallback = "() => DragStart(positionedDie?.Die.Name)"
								OnDropCallback      = "() => DropOnBoard(col, row)"
								OnClickCallback     = "() => OnBoardClick(positionedDie?.Die.Name, col, row)" />
						}}
				</div>
				<div class="rack m-auto mt-3 rounded user-select-none row @(gameOver ? WIN_CLASS : null)" @oncontextmenu:preventDefault>
					@for (int i = 0; i < qLessDice.Dice.Count; i++) {
						int col = i;
						Die? die = qLessDice.Rack.Where(posDie => posDie.Col == col).SingleOrDefault()?.Die;
					<QLessDie
						Css="@(die?.Name == dragId ? MOVE_CLASS : null)"
						DisplayLetter = "@die?.Display"
						Draggable     = "@(die is not null)"
						OnDragStartCallback = "() => DragStart(die?.Name)"
						OnDropCallback      = "() => DropOnRack(col)"
						OnClickCallback     = "() => OnRackClick(die?.Name, col)"/>
				}
				</div>
				@if (qLessDice.HasDictionary) {
					<div class="m-auto text-center user-select-none" ><span>with dictionary</span></div>
				}
			</div>
		</div>
	</div>
}

<style>
	.board {
		--board-width:  @BOARD_WIDTH;
		--board-height: @BOARD_HEIGHT;
	}
	.rack {
		--rack-width:  @RACK_SIZE;
		--rack-height: @((qLessDice?.Dice.Count ?? 12) / RACK_SIZE);
	}
</style>

@code {
	private const int BOARD_HEIGHT = 10;
	private const int BOARD_WIDTH  = 12;
	private const int RACK_SIZE    = 12;

	private const string NO_DIE      = " ";
	private const string WIN_CLASS   = "win";
	private const string MOVE_CLASS  = "move";

	private bool gameOver => gameStatus is QLessDice.Win;
	private QLessDice.Status gameStatus = default!;
	private QLessDice qLessDice = null!;

	private string? dragId = null;
	private bool isClickToMove = false;

	void StartNewGame()
	{
		qLessDice = new(_dictionary);
		gameStatus = qLessDice.GameStatus();
	}

	private void DragStart(string? name)
	{
		if (name is null) {
			return;
		}
		dragId = name;
	}
	private void DragEnd()
	{
		dragId     = null;
	}

	private void DropOnBoard(int col, int row)
	{
		if (dragId is null) {
			return;
		}
		_ = qLessDice.PlaceOnBoard(dragId, col, row);
		dragId     = null;
		gameStatus = qLessDice.GameStatus();
	}

	private void DropOnRack(int col)
	{
		if (dragId is null) {
			return;
		}
		_ = qLessDice.PlaceOnRack(dragId, col);
		dragId = null;
		gameStatus = qLessDice.GameStatus();
	}

	private void OnBoardClick(string? name, int col, int row)
	{
		if (isClickToMove) {
			isClickToMove = false;
			DropOnBoard(col, row);
			return;
		}

		if (name is null) {
			return;
		}

		isClickToMove = true;
		dragId = name;
	}

	private void OnRackClick(string? name, int col)
	{
		if (isClickToMove) {
			isClickToMove = false;
			DropOnRack(col);
			return;
		}

		if (name is null) {
			return;
		}

		isClickToMove = true;
		dragId = name;
	}
}
