@page "/css/animation01"
@attribute [RenderModeServer]
<SmabPageTitle>CSS Animation 01</SmabPageTitle>
<Description Text="@descText" Technologies="@descTechnologies" Concepts="@descConcepts" />

<div>
	<div>
		<SmabButton CssClass="move-button" Title="Move" Text="Random"  OnClick="async () => await RandomMove()" />
		<SmabButton CssClass="move-button" Title="Move" Text="Move 6 above 3"  OnClick="async () => await Move(5,  2)" />
		<SmabButton CssClass="move-button" Title="Move" Text="Move 7 above 1"  OnClick="async () => await Move(6,  0)" />
		<SmabButton CssClass="move-button" Title="Move" Text="Move 3 above 6"  OnClick="async () => await Move(2,  5)" />
		<SmabButton CssClass="move-button" Title="Move" Text="Move 4 above 11" OnClick="async () => await Move(3, 10)" />
		<SmabButton CssClass="move-button" Title="Move" Text="Move 4 below 11" OnClick="async () => await Move(3, 11)" />
	</div>
	<ol>
		@{ int i = 0; }
		@foreach (var item in Movies) {
			<li class="@GenerateLiClass(item, i)" style="@GenerateLiStyle(i)">
				<span>@item</span>
			</li>
			i++;
		}
	</ol>
</div>


@code {

	private int moveFromPos = int.MaxValue;
	private int moveToPos   = int.MaxValue;
	private bool moveIsInProcess => moveFromPos != int.MaxValue;

	public List<string> Movies = [
		"Jaws",
		"The Terminator",
		"Star Wars",
		"Elemental",
		"Raiders of the Lost Ark",
		"Big",
		"Airplane II",
		"Groundhog Day",
		"Barbie",
		"Airplane",
		"Teenage Mutant Ninja Turtles",
	];

	private async Task RandomMove()
	{
		int noOfMovies = Movies.Count;

		int from = Random.Shared.Next(noOfMovies);
		int to = Random.Shared.Next(noOfMovies + 1);
		while (from == to - 1) {
			to = Random.Shared.Next(noOfMovies + 1);
		}

		await Move(from, to);
	}

	private async Task Move(int originalPosition, int newPosition)
	{
		moveFromPos = originalPosition;
		moveToPos = newPosition;
		if (originalPosition <= newPosition) {
			newPosition--;
		}

		string movieName = Movies[originalPosition];

		await Task.Delay(700);

		Movies.RemoveAt(originalPosition);
		if (newPosition < Movies.Count) {
			Movies.Insert(newPosition, movieName);
		} else {
			Movies.Add(movieName);
		}

		moveFromPos = int.MaxValue;
		moveToPos = int.MaxValue;
	}

	private string? GenerateLiStyle(int position)
	{
		if (moveIsInProcess is false) {
			return null;
		}

		int? movePlaces = null;
		int newPosition = moveToPos;
		if (moveFromPos <= moveToPos) {
			newPosition--;
		}

		if (position == moveFromPos) {
			movePlaces = newPosition - moveFromPos;
		} else if (moveToPos < moveFromPos) {
			if ((position >= moveToPos && position <= moveFromPos)) {
				movePlaces = 1;
			}
		} else if (position >= moveFromPos && position <= newPosition) {
			movePlaces = -1;
		}

		return movePlaces switch
		{
			null => null,
			_    => $"--sb-move-places: {movePlaces};",
		};
	}

	private string? GenerateLiClass(string name, int position)
	{
		string? moveMe = null;
		string? move = null;

		if (moveIsInProcess) {
			moveMe = (position == moveFromPos) ? "moveme" : null;
			if (moveMe is null) {
				if (moveToPos < moveFromPos) {
					if ((position >= moveToPos && position <= moveFromPos)) {
						move = "move";
					}
				} else {
					if (position >= moveFromPos && position < moveToPos) {
						move = "move";
					}
				}
			}
		}

		if (moveMe is null && move is null) {
			return null;
		}
		return $"{moveMe} {move}".Trim();
	}

	private readonly string descText = "";

	private readonly string[] descConcepts = [
		"NO JavaScript",
		"css3",
	];

	private readonly string[] descTechnologies = [
		"css3 variables",
		"css3 animation",
	];

}
