@page "/css/animation01"
@attribute [RenderModeServer]
<SmabPageTitle>CSS Animation 01</SmabPageTitle>

<div>
	<div>
		<SmabButton CssClass="move-button" Title="Move" Text="Move 6 above 3"  OnClick="async () => await Move(5,  2)" />
		<SmabButton CssClass="move-button" Title="Move" Text="Move 7 above 1"  OnClick="async () => await Move(6,  0)" />
		<SmabButton CssClass="move-button" Title="Move" Text="Move 3 above 6"  OnClick="async () => await Move(2,  5)" />
		<SmabButton CssClass="move-button" Title="Move" Text="Move 4 above 11" OnClick="async () => await Move(3, 10)" />
		<SmabButton CssClass="move-button" Title="Move" Text="Move 4 below 11" OnClick="async () => await Move(3, 11)" />
	</div>
	<ol>
		@{ int i = 0; }
		@foreach (var item in Movies) {
			<li draggable="true"
				class="@GenerateLiClass(item, i)"
				style="@GenerateLiStyle(i)">
				<div class="remove-button">
					<Confirm Title="Remove movie?"
							 ButtonCssClass="bi bi-trash trash"
							 ConfirmYes="async () => await Remove(item)">
						<MessageTemplate>
							<p><span>@item</span></p>
							<p>Are you sure you don’t want to see this movie any more?</p>
						</MessageTemplate>
					</Confirm>
				</div>
				<span>@item</span>
			</li>
			i++;
		}
	</ol>
</div>


@code {

	private int moveFromPos = int.MaxValue;
	private int moveToPos   = int.MaxValue;

	private string? removeId = null;

	public List<string> Movies { get; set; } = new();

	protected override void OnInitialized()
	{
		Movies = [
			  "Jaws"
			, "The Terminator"
			, "Star Wars"
			, "Elemental"
			, "Raiders of the Lost Ark"
			, "Big"
			, "Airplane II"
			, "Groundhog Day"
			, "Barbie"
			, "Airplane"
			, "Teenage Mutant Ninja Turtles"
		];
	}

	private async Task Move(int originalPosition, int newPosition)
	{
		moveFromPos = originalPosition;
		moveToPos = newPosition;
		if (originalPosition <= newPosition) {
			newPosition--;
		}

		string movieName = Movies[originalPosition];
		StateHasChanged();
		await Task.Delay(700);
		Movies.RemoveAt(originalPosition);
		if (newPosition < Movies.Count) {
			Movies.Insert(newPosition, movieName);
		} else {
			Movies.Add(movieName);
		}

		moveFromPos = int.MaxValue;
		moveToPos = int.MaxValue;
	}


	private async Task Remove(string name)
	{
		removeId = name;
		StateHasChanged();
		await Task.Delay(500);
		Movies.Remove(name);
		removeId = null;
	}

	private string? GenerateLiStyle(int position)
	{
		int? movePlaces = null;
		int newPosition = moveToPos;
		if (moveFromPos <= moveToPos) {
			newPosition--;
		}

		if (position == moveFromPos) {
			movePlaces = newPosition - moveFromPos;
		} else if (moveToPos < moveFromPos) {
			if ((position >= moveToPos && position <= moveFromPos)) {
				movePlaces = 1;
			}
		} else if (position >= moveFromPos && position <= newPosition) {
			movePlaces = -1;
		}

		return movePlaces switch
		{
			null => null,
			_    => $"--sb-move-places: {movePlaces};",
		};
	}

	private string? GenerateLiClass(string name, int position)
	{
		string? hide = (name == removeId) ? "hide shrink-height" : null;

		string? moveMe = (position == moveFromPos) ? "moveme" : null;

		string? down = null;

		if (moveMe is null) {
			if (moveToPos < moveFromPos) {
				if ((position >= moveToPos && position <= moveFromPos)) {
					down = "move";
				}
			} else {
				if (position >= moveFromPos && position < moveToPos) {
					down = "move";
				}
			}
		}

		if (hide is null && moveMe is null && down is null) {
			return null;
		}
		return $"{hide} {moveMe} {down}".Trim();
	}
}
