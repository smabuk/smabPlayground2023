@page "/draganddrop01"
@attribute [RenderModeServer]
<SmabPageTitle>Drag and Drop 01</SmabPageTitle>

<div>
	<ol @ondragover:preventDefault @ondrop="() => Drop()">
		@{ int i = 0; }
		@foreach (var item in Movies) {
			<li draggable="true"
				class="@GenerateLiClass(item, i)"
				style="@GenerateLiStyle(i)"
			@ondragenter:preventDefault
			@ondragleave:preventDefault
			@ondragover:preventDefault
			@ondragstart="() => DragStart(item)"
			@ondragenter="() => DragEnter(item)"
			@ondragleave="() => DragLeave()"
			@ondragover="() => DragOver()"
			@ondragend="() => DragEnd()"
			@ondrop="() => Drop()">
				<div class="remove-button">
					<Confirm Title="Remove movie from Watch List?"
							 ButtonCssClass=""
							 ConfirmYes="async () => await Remove(item)">
						<ButtonContent><span class="bi bi-trash trash" /></ButtonContent>
						<MessageTemplate>
							<p><span>@item</span></p>
							<p>Are you sure you don’t want to see this movie any more?</p>
						</MessageTemplate>
					</Confirm>
				</div>
				<span>@item</span>
			</li>
			i++;
		}
	</ol>
</div>

@code {
	public List<string> Movies = [
		"Jaws",
		"The Terminator",
		"Star Wars",
		"Elemental",
		"Raiders of the Lost Ark",
		"Big",
		"Airplane II",
		"Groundhog Day",
		"Barbie",
		"Airplane",
		"Teenage Mutant Ninja Turtles",
	];

	private string? dragId = null;
	private string? dropTarget = null;
	private bool dropIsProcessing = false;

	private int moveFromPos = int.MaxValue;
	private int moveToPos = int.MaxValue;
	private bool moveIsInProcess => moveFromPos != int.MaxValue;

	private string? removeId = null;

	private async Task Remove(string name)
	{
		removeId = name;
		await Task.Delay(500);
		Movies.Remove(name);
		removeId = null;
	}

	private void DragStart(string name) => dragId = name;
	private void DragEnter(string name)
	{
		if (String.IsNullOrEmpty(name) || dropTarget == name) {
			return;
		}
		dropTarget = name;
	}

	private void DragLeave() { }
	private void DragOver() { }

	private void DragEnd()
	{
		dragId = null;
		dropTarget = null;
	}

	private async Task Drop()
	{
		if (String.IsNullOrWhiteSpace(dropTarget) || String.IsNullOrWhiteSpace(dragId) || dropIsProcessing) {
			return;
		}

		dropIsProcessing = true;

		string movieName = dragId!;
		int originalPosition = Movies.IndexOf(Movies.Single(name => name == movieName));
		int newPosition = Movies.IndexOf(Movies.Single(name => name == dropTarget));
		moveFromPos = originalPosition;
		moveToPos = newPosition;
		if (originalPosition <= newPosition) {
			newPosition--;
		}

		await Task.Delay(700);

		Movies.RemoveAt(originalPosition);
		Movies.Insert(newPosition, movieName);

		moveFromPos = int.MaxValue;
		moveToPos = int.MaxValue;
		dragId = null;
		dropTarget = null;
		dropIsProcessing = false;
	}

	private string? GenerateLiClass(string name, int position)
	{
		string? hide = name == removeId ? " hide shrink-height" : null;
		string? target = name == dropTarget ? " drop-target" : null;
		string? moveMe = null;
		string? moveTo = null;

		if (moveIsInProcess) {
			moveMe = (position == moveFromPos) ? " moveme" : null;
			moveTo = (position == moveToPos) ? " moveto" : null;
		}

		if (hide is null && target is null && moveMe is null && moveTo is null) {
			return null;
		}
		return $"{hide}{target}{moveMe}{moveTo}".Trim();
	}

	private string? GenerateLiStyle(int position)
	{
		if (moveIsInProcess is false || position != moveFromPos) {
			return null;
		}

		int directionOffset = -1;
		int newPosition = moveToPos;
		if (moveFromPos <= moveToPos) {
			newPosition--;
			directionOffset = 1;
		}

		int movePlaces = directionOffset + newPosition - moveFromPos;

		return $"--sb-move-places: {movePlaces};";
	}

	private readonly string[] descConcepts = [
		"NO JavaScript",
		"css3",
		"Modal confirmation",
	];

	private readonly string[] descTechnologies = [
		"html5 drag and drop",
		"css3 animation",
		"bootstrap icons",
	];

}

<Description Technologies="@descTechnologies" Concepts="@descConcepts">
	<TextContent>
		<div class="alert alert-warning" role="alert">
			This doesn't work on mobile.
		</div>
		<p>
			The primary focus of this page is to demonstrate how to use drag and drop with <strong>no JavaScript</strong>.
			By reacting to the drag events we can make use of Blazors smarts to generate the class and style
			on each change and have the css cause an animated reaction. 
		</p>
		<p>
			For more information on the animations see
			<a href="css/animation01">css animation 01</a> and <a href="css/animation02">css animation 02</a>.
		</p>
	</TextContent>
</Description>
