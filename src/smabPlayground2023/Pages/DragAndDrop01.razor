@page "/draganddrop01"
@attribute [RenderModeServer]
<SmabPageTitle>Drag and Drop 01</SmabPageTitle>

<div>
	<ol>
		@{ int i = 0; }
		@foreach (var item in Movies) {
			<li draggable="true"
				class="@GenerateLiClass(item, i)"
				style="@GenerateLiStyle(i)"
			@ondragenter:preventDefault
			@ondragleave:preventDefault
			@ondragover:preventDefault
			@ondragstart="() => DragStart(item)"
			@ondragenter="() => DragEnter(item)"
			@ondragleave="() => DragLeave()"
			@ondragover="() => DragOver()"
			@ondragend="() => DragEnd()"
			@ondrop="() => Drop()">
				<div class="remove-button">
					<Confirm
						Title="Remove signup?"
						ButtonCssClass=""
						ConfirmYes="async () => await Remove(item)">
						<ButtonContent><span class="bi bi-trash trash" /></ButtonContent>
						<MessageTemplate>
							<p><span>@item</span></p>
							<p>Are you sure you don’t want to see this movie any more?</p>
						</MessageTemplate>
					</Confirm>
				</div>
				<span>@item</span>
			</li>
			i++;
		}
	</ol>
</div>


@code {

	private string dragId = "";
	private string dropTarget = "";
	private int moveFromPos = int.MaxValue;
	private int moveToPos = int.MaxValue;
	private string removeId = "";

	public List<string> Movies { get; set; } = new();

	protected override void OnInitialized()
	{
		Movies = new List<string>
		{     "Jaws"
			, "The Terminator"
			, "Star Wars"
			, "Elemental"
			, "Raiders of the Lost Ark"
			, "Big"
			, "Airplane II"
			, "Groundhog Day"
			, "Barbie"
			, "Teenage Mutant Ninja Turtles"
		};
	}

	private async Task Remove(string name)
	{
		removeId = name;
		await Task.Delay(500);
		Movies.Remove(name);
		removeId = "";
	}

	private void DragStart(string name) => dragId = name;
	private void DragEnter(string name) => dropTarget = name;
	private void DragLeave() { }
	private void DragOver() { }

	private void DragEnd()
	{
		dragId = "";
		dropTarget = "";
	}

	private async Task Drop()
	{
		string movieName = dragId;
		if (String.IsNullOrWhiteSpace(dropTarget)) return;
		int originalPosition = Movies.IndexOf(Movies.Single(name => name == movieName));
		int newPosition = Movies.IndexOf(Movies.Single(name => name == dropTarget));
		moveFromPos = originalPosition;
		moveToPos = newPosition;
		if (originalPosition <= newPosition) {
			newPosition--;
		}

		await Task.Delay(700);

		Movies.RemoveAt(originalPosition);
		Movies.Insert(newPosition, movieName);

		moveFromPos = int.MaxValue;
		moveToPos   = int.MaxValue;
		dragId = "";
		dropTarget = "";
	}

	private string? GenerateLiClass(string name, int position)
	{
		string? hide   = name == removeId   ? " hide shrink-height" : null;
		string? target = name == dropTarget ? " drop-target"        : null;

		string? moveMe = (position == moveFromPos) ? " moveme" : null;

		string? move = null;

		if (moveMe is null) {
			if (moveToPos < moveFromPos) {
				if ((position >= moveToPos && position <= moveFromPos)) {
					move = " move";
				}
			} else {
				if (position >= moveFromPos && position < moveToPos) {
					move = " move";
				}
			}
		}

		if (hide is null && target is null && moveMe is null && move is null) {
			return null;
		}
		return $"{hide}{target}{moveMe}{move}".Trim();
	}

	private string? GenerateLiStyle(int position)
	{
		int? movePlaces = null;
		int newPosition = moveToPos;
		if (moveFromPos <= moveToPos) {
			newPosition--;
		}

		if (position == moveFromPos) {
			movePlaces = newPosition - moveFromPos;
		} else if (moveToPos < moveFromPos) {
			if ((position >= moveToPos && position <= moveFromPos)) {
				movePlaces = 1;
			}
		} else if (position >= moveFromPos && position <= newPosition) {
			movePlaces = -1;
		}

		return movePlaces switch
		{
			null => null,
			_ => $"--sb-move-places: {movePlaces};",
		};
	}

}
