<table>
	<caption>
		<span>@($"{(GameOver ? "Final" : "")} Score: {Score}")</span>
		@if (!GameOver) {
			<span danger="@isDangerZone">Time remaining: @($"{TimeRemaining:m\\:ss}")</span>
		}
	</caption>
	<thead>
		<tr>
			<th>Score</th>
			<th>Word</th>
			<th>Reason</th>
		</tr>
	</thead>
	<tbody>
		@foreach (BoggleDice.WordScore wordScore in OrderedWordList) {
			<tr data-reason="@(wordScore.Reason is BoggleDice.ScoreReason.Success ? null : wordScore.Reason.ToString().ToLowerInvariant())">
				<td>@wordScore.Score</td>
				<td>@wordScore.Word</td>
				<td>@GetReason(wordScore.Reason)</td>
			</tr>
		}
	</tbody>
</table>

@code {
	[Parameter]
	public bool GameOver { get; set; } = false;

	[Parameter]
	public IEnumerable<BoggleDice.WordScore> WordScores { get; set; } = [];

	[Parameter]
	public int Score { get; set; } = 0;

	[Parameter]
	public TimeSpan TimeRemaining { get; set; } = TimeSpan.Zero;

	private bool isDangerZone => TimeRemaining < TimeSpan.FromSeconds(10); 
	private IEnumerable<BoggleDice.WordScore> OrderedWordList
		=> GameOver ? WordScores.OrderBy(w => w.Word) : WordScores.Reverse();

	private string GetReason(BoggleDice.ScoreReason reason)
	{
		return reason switch {
			BoggleDice.ScoreReason.Success       => "",
			BoggleDice.ScoreReason.AlreadyPlayed => "Duplicate word",
			BoggleDice.ScoreReason.Misspelt      => "Spelling error",
			BoggleDice.ScoreReason.TooShort      => "Too short",
			BoggleDice.ScoreReason.Unplayable    => "Unplayable",
			_ => ""
		};
	}

}
