@inject IDictionaryService _dictionary;
@implements IDisposable

<div class="row">
	@if (RendererInfo.IsInteractive)
	{
		@if (gameOver) {
			<button class="btn btn-primary" type="button" @onclick="() => StartNewGame()">New Game</button>
		} else {
			<button class="btn btn-primary" type="button" @onclick="() => EndGame()">End Game</button>
		}
	} else {
		<button class="btn btn-primary" type="button" disabled>Loading ...</button>
	}
</div>
@if (boggleDice is not null) {
	<div id="boggle">
		<div id="board_container">
			<div>
				<div id="board" @oncontextmenu:preventDefault>
					@for (int r = 0; r < boggleDice.BoardHeight; r++) {
						@for (int c = 0; c < boggleDice.BoardWidth; c++) {
							int row = r;
							int col = c;
							PositionedDie positionedDie = boggleDice.Board.Where(d => d.Row == row && d.Col == col).Single();
							<BoggleDie
								Die                   = "@((LetterDie?)(positionedDie.Die))"
								IsSelected            = "@boggleSlots[(col, row)].IsSelected"
								ArrowDirection        = "@boggleSlots[(col, row)].ArrowDirection"
								OnClickCallback       = "() => OnBoardClick(positionedDie)"
								OnContextMenuCallback = "() => OnBoardClick(positionedDie, playTheWord: true)" />
						}}
				</div>

				<div id="dictionary">
					@if (boggleDice.HasDictionary) { <span>with a dictionary</span> }
					<WhereAmIRunning />
				</div>
				<EditForm Model="this" FormName="word-input" OnSubmit="PlayWord">
					<InputText disabled="@gameOver" @bind-Value="currentWord" autocomplete="off"></InputText>
				</EditForm>
			</div>
		</div>
		<BoggleWordList
			GameOver="gameOver"
			Score="boggleDice.Score"
			WordScores="boggleDice.WordScores"
			TimeRemaining="timeRemaining" />
	</div>
	<style>
		#boggle {
			--board-width:  @boggleDice.BoardWidth;
		}
	</style>
}

@using Position = (int Col, int Row)
@code {
	[Parameter] public BoggleType BoggleSetType { get; set; } = BoggleType.Classic4x4;

	private string boggleFriendlyName => BoggleSetType switch
	{
		BoggleType.Classic4x4         => "Boggle Classic",
		BoggleType.BigBoggleDeluxe    => "Big Boggle Deluxe",
		BoggleType.SuperBigBoggle2012 => "Super Big Boggle",
		BoggleType.New4x4             => "New Boggle 4x4",
		BoggleType.BigBoggleOriginal  => "Big Boggle",
		BoggleType.BigBoggleChallenge => "Big Boggle Challenge",
		_ => "Boggle"
	};

	public CancellationTokenSource CancelTimer { get; set; } = new();
	private PeriodicTimer periodicTimer = new(TimeSpan.FromSeconds(1));
	private long startTime;
	private TimeSpan timeSpan = TimeSpan.FromMinutes(3);
	private TimeSpan timeRemaining = TimeSpan.Zero;
	private bool gameOver = true;

	private BoggleDice boggleDice = null!;
	private Dictionary<Position, BoggleSlot> boggleSlots = new();
	private Stack<BoggleSlot> previousSlots = [];
	private string? currentWord = "";

	void StartNewGame()
	{
		boggleDice = new(BoggleSetType, _dictionary);
		boggleSlots = boggleDice.Board.ToDictionary(
			p => (p.Col, p.Row),
			p => new BoggleSlot(p)
		);

		timeSpan = BoggleSetType switch
		{
			BoggleType.SuperBigBoggle2012 => TimeSpan.FromMinutes(4),
			_ => TimeSpan.FromMinutes(3),
		};

		startTime = Stopwatch.GetTimestamp();
		timeRemaining = timeSpan;
		CancelTimer = new();
		periodicTimer = new(TimeSpan.FromSeconds(0.5));
		gameOver = false;
		Tick();
	}

	void EndGame()
	{
		gameOver = true;
		CancelTimer.Cancel();
		periodicTimer.Dispose();
	}

	async void Tick()
	{
		try {
			while (!CancelTimer.IsCancellationRequested && await periodicTimer.WaitForNextTickAsync(CancelTimer.Token)) {
				timeRemaining = timeSpan.Subtract(Stopwatch.GetElapsedTime(startTime));
				StateHasChanged();
				if (timeRemaining < TimeSpan.Zero) {
					EndGame();
				}
			}
		} catch (OperationCanceledException) {

		}
	}

	private void PlayWord()
	{
		if (string.IsNullOrWhiteSpace(currentWord) || currentWord.Length < 3) {
			return;
		}

		(boggleDice, WordScore wordScore) = boggleDice.PlayWord(currentWord);
		#if DEBUG
			Console.WriteLine($"Word:  {currentWord}  Score: {wordScore.Score} Reason: {wordScore.Reason}");
		#endif
		currentWord = "";
		previousSlots = [];
		foreach ((Position pos, BoggleSlot boggleSlot) in boggleSlots.Where(kvp => kvp.Value.IsSelected)) {
			boggleSlots[pos] = boggleSlots[pos].SetNoArrowDirection() with { IsSelected = false};
		}
	}

	private void OnBoardClick(PositionedDie positionedDie, bool playTheWord = false)
	{
		if (gameOver) {
			return;
		}
		string letter = positionedDie.Die.Display;
		Position position = (positionedDie.Col, positionedDie.Row);
		BoggleSlot slot = boggleSlots[position];
		BoggleSlot? prevSlot = previousSlots.Count > 0 ? previousSlots.Peek() : null;
		if (playTheWord) {
			PlayWord();
		} else if (slot.IsSelectable && (prevSlot is null || prevSlot.IsSameOrAdjacent(slot.Col, slot.Row))) {
			// #if DEBUG
			// 	Console.WriteLine($"Selected: {letter} at ({slot.Col}, {slot.Row})");
			// #endif
			if (prevSlot is null) {
				boggleSlots[position] = boggleSlots[position].SetArrowDirection(prevSlot?.Position, slot.Col, slot.Row);
			} else {
				boggleSlots[prevSlot.Position] = boggleSlots[prevSlot.Position].SetArrowDirection(prevSlot?.Position, slot.Col, slot.Row);
			}
			boggleSlots[position] = boggleSlots[position] with { IsSelected = true };
			currentWord += letter;
			previousSlots.Push(boggleSlots[position]);
		} else if (prevSlot?.Col == slot.Col && prevSlot?.Row == slot.Row) {
			// #if DEBUG
			// 	Console.WriteLine($"Unselecting: {letter} at ({slot.Col}, {slot.Row})");
			// #endif
			boggleSlots[position] = slot with { IsSelected = false };
			currentWord = currentWord?[..^(letter.Length)];
			_ = previousSlots.Pop();
			prevSlot = previousSlots.Count > 0 ? previousSlots.Peek() : null;
			if (prevSlot is null) {
				boggleSlots[position] = boggleSlots[position].SetArrowDirection(prevSlot?.Position, slot.Col, slot.Row);
			} else {
				boggleSlots[prevSlot.Position] = boggleSlots[prevSlot.Position].SetNoArrowDirection();
			}
		}
	}

	public void Dispose()
	{
		CancelTimer.Cancel();
		periodicTimer.Dispose();
	}
}
