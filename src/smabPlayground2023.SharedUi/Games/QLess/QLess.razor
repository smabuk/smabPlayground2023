@inject IDictionaryService _dictionary;

<div class="row">
	<button class="btn btn-primary" type="button" @onclick="() => StartNewGame()">@(gameOver ? "CONGRATULATIONS - New Game" : "New Game")</button>
</div>
@if (qLessDice is not null) {
		<div id="board_and_rack">
			<div>
				<div id="board" win="@gameOver" @oncontextmenu:preventDefault>
					@for (int r = 0; r < BOARD_HEIGHT; r++) {
						@for (int c = 0; c < BOARD_WIDTH; c++) {
							int row = r;
							int col = c;
							PositionedDie? positionedDie = qLessDice.Board.Where(d => d.Row == row && d.Col == col).SingleOrDefault();
							<QLessDie
								DisplayLetter = "@(positionedDie is null ? NO_DIE : positionedDie.Die.Display)"
								IsDraggable   = "@(positionedDie is not null)"
								IsError       = "@(gameStatus is Errors gs ? gs.DiceWithErrors.Any(d => d.Row == row && d.Col == col) ? true : false : false)"
								IsMoving      = "@(positionedDie?.Die.Id is not null && positionedDie.Die.Id == dragId)"
								OnDragStartCallback = "() => DragStart(positionedDie?.Die.Id)"
								OnDropCallback      = "() => DropOnBoard(col, row)"
								OnClickCallback     = "() => OnBoardClick(positionedDie?.Die.Id, col, row)" />
						}}
				</div>
				<div id="rack" win="@gameOver" @oncontextmenu:preventDefault>
					@for (int i = 0; i < qLessDice.Dice.Count; i++) {
						int col = i;
						Die? die = qLessDice.Rack.Where(posDie => posDie.Col == col).SingleOrDefault()?.Die;
					<QLessDie
						DisplayLetter = "@die?.Display"
						IsDraggable   = "@(die is not null)"
						IsMoving      = "@(die?.Id is not null && die.Id == dragId)"
						OnDragStartCallback = "() => DragStart(die?.Id)"
						OnDropCallback      = "() => DropOnRack(col)"
						OnClickCallback     = "() => OnRackClick(die?.Id, col)"/>
				}
				</div>
				<div id="dictionary">
					@if (qLessDice.HasDictionary) { <span>with a dictionary</span> }
					<WhereAmIRunning />
				</div>
			</div>
		</div>
}

<style>
	#board_and_rack {
		--board-width:  @BOARD_WIDTH;
		--board-height: @BOARD_HEIGHT;
		--rack-width:   @RACK_SIZE;
	}
</style>

@code {
	private const int BOARD_HEIGHT = 10;
	private const int BOARD_WIDTH  = 12;
	private const int RACK_SIZE    = 12;

	private const string NO_DIE      = " ";

	private bool gameOver => gameStatus is Win;
	private QLessDiceStatus gameStatus = default!;
	private QLessDice qLessDice = null!;

	private DieId? dragId = null;
	private bool isClickToMoveInProgress = false;



	void StartNewGame()
	{
		qLessDice = new(_dictionary);
		gameStatus = qLessDice.GameStatus();
	}



	private void DragStart(DieId? dieId)
	{
		if (dieId is not null) {
			dragId = dieId;
		}
	}

	private void DragEnd()
	{
		dragId = null;
	}

	private void DropOnBoard(int col, int row)
	{
		if (dragId is not null) {
			(_, qLessDice) = qLessDice.PlaceOnBoard(new DieId(dragId), col, row);
			dragId     = null;
			isClickToMoveInProgress = false;
			gameStatus = qLessDice.GameStatus();
		}
	}

	private void DropOnRack(int col)
	{
		if (dragId is not null) {
			(_, qLessDice) = qLessDice.PlaceOnRack(new DieId(dragId), col);
			dragId = null;
			isClickToMoveInProgress = false;
			gameStatus = qLessDice.GameStatus();
		}
	}

	private void OnBoardClick(DieId? dieId, int col, int row)
	{
		if (isClickToMoveInProgress) {
			isClickToMoveInProgress = false;
			DropOnBoard(col, row);
			return;
		}

		if (dieId is not null) {
			isClickToMoveInProgress = true;
			dragId = dieId;
		}
	}

	private void OnRackClick(DieId? dieId, int col)
	{
		if (isClickToMoveInProgress) {
			isClickToMoveInProgress = false;
			DropOnRack(col);
			return;
		}

		if (dieId is not null) {
			isClickToMoveInProgress = true;
			dragId = dieId;
		}
	}
}
