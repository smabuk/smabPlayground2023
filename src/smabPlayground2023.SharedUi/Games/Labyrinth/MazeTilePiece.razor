<div data-treasure="@(MazeTile.Treasure is not Treasure.None ? MazeTile.Treasure : null)"
	 data-directions="@MazeTile.PathDirections()"
	 data-playerhome="@MazeTile.Treasure.IsPlayer()"
	 data-rotation="@MazeTile.Orientation"
	 @onclick="async () => { await OnClick.InvokeAsync(); }"
	 @oncontextmenu="async () => { await OnContextMenu.InvokeAsync(); }"
	 @oncontextmenu:preventDefault="@Extra"
	 @attributes="AdditionalAttributes">
	 <PathBackground MazeTile="MazeTile" />
	<span>@((MarkupString)FormatTreasure(MazeTile.Treasure))</span>
</div>

@code {
	[Parameter, EditorRequired]
	public required MazeTile MazeTile { get; set; }

	[Parameter]
	public bool Extra { get; set; } = false;

	[Parameter]
	public FormatTreasure FormatTreasure { get; set; } = FormatTreasureDefaults.DefaultEmoji;

	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object>? AdditionalAttributes { get; set; }

	[Parameter] public EventCallback OnClick { get; set; }
	[Parameter] public EventCallback OnContextMenu { get; set; }
}
