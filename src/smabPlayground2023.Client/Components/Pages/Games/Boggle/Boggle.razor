@page "/games/boggle"
@page "/games/boggle/{boggleType}"
@layout BlankLayout
@rendermode InteractiveAuto
@inject IDictionaryService _dictionary;
@implements IDisposable

<SmabPageTitle>@boggleFriendlyName</SmabPageTitle>
<div class="row">
	<button class="btn btn-primary" type="button" @onclick="() => StartNewGame()">New Game</button>
</div>
@if (boggleDice is not null) {
	<div id="boggle">
		<div id="board_container">
			<div>
				<div id="board" @oncontextmenu:preventDefault>
					@for (int r = 0; r < boggleDice.BoardHeight; r++) {
						@for (int c = 0; c < boggleDice.BoardWidth; c++) {
							int row = r;
							int col = c;
							PositionedDie positionedDie = boggleDice.Board.Where(d => d.Row == row && d.Col == col).Single();
							<BoggleDie
								Die                   = "@((LetterDie?)(positionedDie.Die))"
								IsSelected            = "@boggleSlots[(col, row)].IsSelected"
								ArrowDirection        = "@boggleSlots[(col, row)].ArrowDirection"
								OnClickCallback       = "() => OnBoardClick(positionedDie)"
								OnContextMenuCallback = "() => OnBoardClick(positionedDie, playTheWord: true)" />
						}}
				</div>

				<div id="dictionary">
					@if (boggleDice.HasDictionary) { <span>with a dictionary</span> }
					<WhereAmIRunning />
				</div>
			</div>
		</div>
		<BoggleWordList Score="boggleDice.Score" WordScores="boggleDice.WordScores" TimeRemaining="new TimeSpan(0, 3, 0)" />
	</div>
	<style>
		#boggle {
			--board-width:  @boggleDice.BoardWidth;
		}
	</style>
}

@using Position = (int Col, int Row)
@code {
    [Parameter] public string boggleType { get; set; } = BoggleTypes.BigBoggleDeluxe;

    public BoggleDice.BoggleType BoggleSetType { get; set; } = BoggleDice.BoggleType.Classic4x4;

    private string boggleFriendlyName => BoggleSetType switch
    {
        BoggleDice.BoggleType.Classic4x4         => "Boggle Classic",
        BoggleDice.BoggleType.BigBoggleDeluxe    => "Big Boggle Deluxe",
        BoggleDice.BoggleType.SuperBigBoggle2012 => "Super Big Boggle",
        BoggleDice.BoggleType.New4x4             => "New Boggle 4x4",
        BoggleDice.BoggleType.BigBoggleOriginal  => "Big Boggle",
        BoggleDice.BoggleType.BigBoggleChallenge => "Big Boggle Challenge",
        _ => "Boggle"
    };

    public bool CancelTimer { get; set; } = false;

    private BoggleDice boggleDice = null!;
    private Dictionary<Position, BoggleSlot> boggleSlots = new();
    private Stack<BoggleSlot> previousSlots = [];
    private string? currentWord = "";

    protected override void OnParametersSet()
    {
        BoggleSetType = boggleType?.ToBoggleType() ?? BoggleDice.BoggleType.BigBoggleDeluxe;
    }

    void StartNewGame()
    {
        boggleDice = new(BoggleSetType, _dictionary);
        boggleSlots = boggleDice.Board.ToDictionary(
            p => (p.Col, p.Row),
            p => new BoggleSlot(p)
        );
    }

    private void OnBoardClick(PositionedDie positionedDie, bool playTheWord = false)
    {
        string letter = positionedDie.Die.Display;
        Position position = (positionedDie.Col, positionedDie.Row);
        BoggleSlot slot = boggleSlots[position];
        BoggleSlot? prevSlot = previousSlots.Count > 0 ? previousSlots.Peek() : null;
        if (playTheWord) {
            if (currentWord is not null && prevSlot is not null) {
                BoggleDice.WordScore wordScore = boggleDice.PlayWord(currentWord);
#if	DEBUG
	Console.WriteLine($"Word:  {currentWord}  Score: {wordScore.Score} Reason: {wordScore.Reason}");
#endif
			}
			currentWord = "";
			previousSlots = [];
			foreach ((Position pos, BoggleSlot boggleSlot) in boggleSlots.Where(kvp => kvp.Value.IsSelected)) {
				boggleSlots[pos] = boggleSlots[pos].SetNoArrowDirection() with { IsSelected = false};
			}
		} else if (slot.IsSelectable && (prevSlot is null || prevSlot.IsSameOrAdjacent(slot.Col, slot.Row))) {
// #if DEBUG
// 	Console.WriteLine($"Selected: {letter} at ({slot.Col}, {slot.Row})");
// #endif
			if (prevSlot is null) {
				boggleSlots[position] = boggleSlots[position].SetArrowDirection(prevSlot?.Position, slot.Col, slot.Row);
			} else {
				boggleSlots[prevSlot.Position] = boggleSlots[prevSlot.Position].SetArrowDirection(prevSlot?.Position, slot.Col, slot.Row);
			}
			boggleSlots[position] = boggleSlots[position] with { IsSelected = true };
			currentWord += letter;
			previousSlots.Push(boggleSlots[position]);
		} else if (prevSlot?.Col == slot.Col && prevSlot?.Row == slot.Row) {
// #if DEBUG
// 	Console.WriteLine($"Unselecting: {letter} at ({slot.Col}, {slot.Row})");
// #endif
			boggleSlots[position] = slot with { IsSelected = false };
			currentWord = currentWord?[..^(letter.Length)];
			_ = previousSlots.Pop();
			prevSlot = previousSlots.Count > 0 ? previousSlots.Peek() : null;
			if (prevSlot is null) {
				boggleSlots[position] = boggleSlots[position].SetArrowDirection(prevSlot?.Position, slot.Col, slot.Row);
			} else {
				boggleSlots[prevSlot.Position] = boggleSlots[prevSlot.Position].SetNoArrowDirection();
			}
		}
	}

	public void Dispose()
	{
		CancelTimer = true;
	}
}
